#include<stdlib.h>
#include<stdio.h>
#include<string.h>
#include<math.h>
#include<gtk/gtk.h>
#include<time.h>
#include "color.h"
#include "common.h"
#include "geometry.h"
#include "trace.h"
#include "contact.h"
#include "gtk_cairo.h"
#include "busroute.h"

/*
*
*  Gdk drawing operations.
*
*************************************************************************
*************************************************************************/

void set_background_color(GdkGC *gc, int red, int green, int blue)
{
  GdkColormap * cmap = gdk_colormap_get_system();
  GdkColor color;
  color.red = red;
  color.green = green;
  color.blue = blue;
  if (gdk_colormap_alloc_color(cmap, &color, FALSE, TRUE))
  { 
	gdk_gc_set_background(gc, &color);
  }
}

void set_foreground_color(GdkGC *gc, int red, int green, int blue)
{
  GdkColormap * cmap = gdk_colormap_get_system();
  GdkColor color;
  color.red = red;
  color.green = green;
  color.blue = blue;
  if (gdk_colormap_alloc_color(cmap, &color, FALSE, TRUE))
  { 
	gdk_gc_set_foreground(gc, &color);
  }
}


void rub_bar(GdkDrawable *drawable, GdkGC *gc, int barWidth)
{
	int width, height;
	gdk_drawable_get_size(drawable, &width, &height);
	set_foreground_color(gc, 65535*255/255, 65535*255/255, 65535*255/255);
	gdk_draw_rectangle(drawable, gc, TRUE, 0, 0, barWidth, height);
	gdk_draw_rectangle(drawable, gc, TRUE, 0, height-barWidth, width, barWidth);
	gdk_draw_rectangle(drawable, gc, TRUE, 0, 0, width, barWidth);
	gdk_draw_rectangle(drawable, gc, TRUE, width-barWidth,0, barWidth, height);
}



void brush_bar(GdkDrawable *drawable, GdkGC *gc, int barWidth, int no)
{
	int width, height;
	GdkPoint points[3];

	gdk_drawable_get_size(drawable, &width, &height);
	set_foreground_color(gc, 65535*222/255, 65535*217/255, 65535*202/255);
	switch (no) {
		case 1:
			gdk_draw_rectangle(drawable, gc, TRUE, 0, height/4, barWidth-1, height/2);
			points[0].x = 7, points[0].y = height/2-5;
			points[1].x = 2, points[1].y = height/2;
			points[2].x = 7, points[2].y = height/2+5;
			set_foreground_color(gc, 65535*255/255, 65535*255/255, 65535*255/255);
			gdk_draw_polygon(drawable, gc, TRUE, points, 3);
			break;
		case 2:
			gdk_draw_rectangle(drawable, gc, TRUE, 0, 3*height/4, barWidth-1, height/4-1);
			gdk_draw_rectangle(drawable, gc, TRUE, 0, height-barWidth+1, width/4, barWidth-1);
			points[0].x = 3, points[0].y = height-10;
			points[1].x = 3, points[1].y = height-3;
			points[2].x = 10, points[2].y = height-3;
			set_foreground_color(gc, 65535*255/255, 65535*255/255, 65535*255/255);
			gdk_draw_polygon(drawable, gc, TRUE, points, 3);
			break;
		case 3:
			gdk_draw_rectangle(drawable, gc, TRUE, width/4, height-barWidth+1, width/2-1, barWidth-1);
			points[0].x = width/2, points[0].y = height-2;
			points[1].x = width/2+5, points[1].y = height-7;
			points[2].x = width/2-5, points[2].y = height-7;
			set_foreground_color(gc, 65535*255/255, 65535*255/255, 65535*255/255);
			gdk_draw_polygon(drawable, gc, TRUE, points, 3);
			break;
		case 4:
			gdk_draw_rectangle(drawable, gc, TRUE, width*3/4, height-barWidth+1, width/4, barWidth-1);
			gdk_draw_rectangle(drawable, gc, TRUE, width-barWidth+1, height*3/4, barWidth-1, height/4);
			points[0].x = width-10, points[0].y = height-3;
			points[1].x = width-3, points[1].y = height-3;
			points[2].x = width-3, points[2].y = height-10;
			set_foreground_color(gc, 65535*255/255, 65535*255/255, 65535*255/255);
			gdk_draw_polygon(drawable, gc, TRUE, points, 3);
			break;
		case 5:
			gdk_draw_rectangle(drawable, gc, TRUE, width-barWidth+1, height/4, barWidth-1, height/2);
			points[0].x = width-7, points[0].y = height/2-5;
			points[1].x = width-2, points[1].y = height/2;
			points[2].x = width-7, points[2].y = height/2+5;
			set_foreground_color(gc, 65535*255/255, 65535*255/255, 65535*255/255);
			gdk_draw_polygon(drawable, gc, TRUE, points, 3);
			break;
		case 6:
			gdk_draw_rectangle(drawable, gc, TRUE, width*3/4, 0, width/4, barWidth-1);
			gdk_draw_rectangle(drawable, gc, TRUE, width-MARGIN+1, 0, barWidth-1, height/4);
			points[0].x = width-10, points[0].y = 3;
			points[1].x = width-3, points[1].y = 3;
			points[2].x = width-3, points[2].y = 10;
			set_foreground_color(gc, 65535*255/255, 65535*255/255, 65535*255/255);
			gdk_draw_polygon(drawable, gc, TRUE, points, 3);
			break;
		case 7:
			gdk_draw_rectangle(drawable, gc, TRUE, width/4, 0, width/2, barWidth-1);
			points[0].x = width/2, points[0].y = 2;
			points[1].x = width/2-5, points[1].y = 7;
			points[2].x = width/2+5, points[2].y = 7;
			set_foreground_color(gc, 65535*255/255, 65535*255/255, 65535*255/255);
			gdk_draw_polygon(drawable, gc, TRUE, points, 3);
			break;
		case 8:
			gdk_draw_rectangle(drawable, gc, TRUE, 0, 0, barWidth-1, height/4);
			gdk_draw_rectangle(drawable, gc, TRUE, 0, 0, width/4, barWidth-1);
			points[0].x = 3, points[0].y = 3;
			points[1].x = 3, points[1].y = 10;
			points[2].x = 10, points[2].y = 3;
			set_foreground_color(gc, 65535*255/255, 65535*255/255, 65535*255/255);
			gdk_draw_polygon(drawable, gc, TRUE, points, 3);
			break;
	}
}


void init_context(struct Context *aContext)
{
	aContext->region = NULL;
	hashtable_init(&aContext->routeTable, NUM_OF_ROUTES, (unsigned long(*)(void*))sdbm, (int(*)(void*, void*))route_has_name);
	duallist_init(&(aContext->selectedRoutes));
	hashtable_init(&aContext->traceTable, NUM_OF_TRACES, (unsigned long(*)(void*))sdbm, (int(*)(void*, void*))trace_has_name);
	duallist_init(&(aContext->selectedTraces));
	aContext->focusTrace = NULL;
	hashtable_init(&aContext->pairTable, NUM_OF_CONTACTPAIRS, (unsigned long(*)(void*))sdbm, (int(*)(void*, void*))pair_has_names);
	duallist_init(&(aContext->selectedPairs));
	aContext->focusPair = NULL;
	hashtable_init(&aContext->cellTable, 1000, (unsigned long(*)(void*))sdbm, (int(*)(void*, void*))cell_has_nos);

	aContext->vRegion = NULL;
	duallist_init(&aContext->rsus);
	duallist_init(&aContext->links);

	duallist_init(&aContext->screenSurroundings);
  	aContext->mouseAtRoad = NULL;
  	aContext->mouseAtCross = NULL;
  	aContext->mouseAtCell = NULL;
  	aContext->mouseAtReport = NULL;
  	aContext->screenX = 0;
  	aContext->screenY = 0;

	aContext->scale = 1;
	aContext->colormap = NULL;

	aContext->startAt = 0;
	aContext->endAt = 0;
	aContext->atClock = 0;
	aContext->timeout = 0;
	aContext->firstShown = 1;
	aContext->playSpeed = 1;

	aContext->canvas = NULL;
	aContext->cr_on_canvas = NULL;
	aContext->cr_on_screen = NULL;
	aContext->drawingArea = NULL;
	aContext->backwardButton = NULL;
	aContext->forwardButton = NULL;
	aContext->gc = NULL;
}


void setup_context(struct Context *aContext, struct WindowSize *awin)
{
	double deltaCx, deltaCy, deltaSx, deltaSy;

	if(awin!=NULL) {
		aContext->canvasWindow.cBox.xmin = awin->cBox.xmin;
		aContext->canvasWindow.cBox.xmax = awin->cBox.xmax;
		aContext->canvasWindow.cBox.ymin = awin->cBox.ymin;
		aContext->canvasWindow.cBox.ymax = awin->cBox.ymax;
		aContext->canvasWindow.sBox.xmin = awin->sBox.xmin;
		aContext->canvasWindow.sBox.xmax = awin->sBox.xmax;
		aContext->canvasWindow.sBox.ymin = awin->sBox.ymin;
		aContext->canvasWindow.sBox.ymax = awin->sBox.ymax;
	}
	/* how long a pixel is in meters on the map*/
	deltaCx =aContext->canvasWindow.cBox.xmax-aContext->canvasWindow.cBox.xmin;
	deltaCy =aContext->canvasWindow.cBox.ymax-aContext->canvasWindow.cBox.ymin;
	deltaSx =aContext->canvasWindow.sBox.xmax-aContext->canvasWindow.sBox.xmin;
	deltaSy =aContext->canvasWindow.sBox.ymax-aContext->canvasWindow.sBox.ymin;
	if(deltaCy/deltaCx > deltaSy/deltaSx)
	      aContext->meterperpixel = deltaCy/deltaSy;
	else 
	      aContext->meterperpixel = deltaCx/deltaSx;
	aContext->meterperpixel = distance_in_meter(0, 0, 0, aContext->meterperpixel); 

	if(aContext->canvas) {
		g_object_unref(aContext->canvas);
		cairo_destroy(aContext->cr_on_canvas);
		cairo_destroy(aContext->cr_on_screen);
	}
  	if(aContext->gc) gdk_gc_unref(aContext->gc);
	
	aContext->canvas = gdk_pixmap_new(aContext->drawingArea->window, aContext->canvasWindow.sBox.xmax, aContext->canvasWindow.sBox.ymax,-1);
	aContext->cr_on_canvas = gdk_cairo_create(aContext->canvas);
	aContext->cr_on_screen = gdk_cairo_create(aContext->drawingArea->window);
  	aContext->gc = gdk_gc_new(aContext->drawingArea->window);
}

void draw_canvas(struct Context *aContext) 
{

	/* draw background */
	cairo_set_source_rgb(aContext->cr_on_canvas, 1, 1, 1);
	cairo_paint(aContext->cr_on_canvas);	
	cairo_rectangle(aContext->cr_on_canvas, 0, 0, aContext->canvasWindow.sBox.xmax, aContext->canvasWindow.sBox.ymax);
	cairo_clip(aContext->cr_on_canvas);
	cairo_rectangle(aContext->cr_on_canvas, 0, 0, aContext->canvasWindow.sBox.xmax, aContext->canvasWindow.sBox.ymax);
	cairo_set_source_rgb(aContext->cr_on_canvas, 176.0/255, 212.0/255, 236.0/255);
	cairo_fill(aContext->cr_on_canvas);
	/* draw districts */
	draw_districts(aContext);
	/* draw rivers */
	draw_rivers(aContext);
	/* draw roads */
	draw_roads(aContext);
	/* draw crosses */
	draw_crosses(aContext);
}

/* screenX, screenY are the coordinates of the origin of the screen on the canvas */
void setup_screen(struct Context *aContext, int screenX, int screenY)
{
	if(screenX != NOTSET)
		aContext->screenX = screenX;
	if(screenY != NOTSET)
		aContext->screenY = screenY;
	canvas_to_gps(&aContext->canvasWindow, aContext->screenX+MARGIN, aContext->screenY+aContext->screenHeight-MARGIN, &(aContext->screenBox.xmin), &(aContext->screenBox.ymin));
	canvas_to_gps(&aContext->canvasWindow, aContext->screenX+aContext->screenWidth-MARGIN, aContext->screenY+MARGIN, &(aContext->screenBox.xmax), &(aContext->screenBox.ymax));

	aContext->mouseAtRoad = NULL;
	aContext->mouseAtCross = NULL;
	aContext->mouseAtCell = NULL;
	aContext->mouseAtReport = NULL;
}

void draw_screen(struct Context *aContext) 
{
	gdk_draw_drawable(aContext->drawingArea->window, aContext->gc, aContext->canvas, aContext->screenX+MARGIN, aContext->screenY+MARGIN, MARGIN, MARGIN, aContext->screenWidth-2*MARGIN, aContext->screenHeight-2*MARGIN);
	draw_yardstick_on_screen(aContext);
}


void destroy_context(struct Context *aContext)
{
  	region_free_func(aContext->region);
  	region_free_func(aContext->vRegion);
	duallist_destroy(&aContext->links, NULL);
	duallist_destroy(&aContext->rsus, NULL);
	duallist_destroy(&aContext->screenSurroundings, NULL);
	hashtable_destroy(&aContext->routeTable, (void(*)(void*))route_free_func);
	duallist_destroy(&aContext->selectedRoutes, NULL);
	hashtable_destroy(&aContext->traceTable, (void(*)(void*))trace_free_func);
	duallist_destroy(&aContext->selectedTraces, NULL);
	hashtable_destroy(&aContext->pairTable, (void(*)(void*))pair_free_func);
	duallist_destroy(&aContext->selectedPairs, NULL);
	hashtable_destroy(&aContext->cellTable, NULL);
	free_colormap(aContext->colormap);

  	gdk_gc_unref(aContext->gc);
	if(aContext->canvas) {
		g_object_unref(aContext->canvas);
		cairo_destroy(aContext->cr_on_canvas);
		cairo_destroy(aContext->cr_on_screen);
	}
  	if(aContext->timeout != 0) 
		gtk_timeout_remove(aContext->timeout);  
	free(aContext);
}

void draw_single_cell(struct Context *aContext, cairo_t *cr, struct Cell *aCell, struct RGBO *color)
{

	struct Point p1;

	gps_to_canvas(&aContext->canvasWindow, aCell->box.xmin, aCell->box.ymin, &p1.x, &p1.y);
	cairo_move_to(cr, p1.x-aContext->screenX, p1.y-aContext->screenY);
	gps_to_canvas(&aContext->canvasWindow, aCell->box.xmin, aCell->box.ymax, &p1.x, &p1.y);
	cairo_line_to(cr, p1.x-aContext->screenX, p1.y-aContext->screenY);
	gps_to_canvas(&aContext->canvasWindow, aCell->box.xmax, aCell->box.ymax, &p1.x, &p1.y);
	cairo_line_to(cr, p1.x-aContext->screenX, p1.y-aContext->screenY);
	gps_to_canvas(&aContext->canvasWindow, aCell->box.xmax, aCell->box.ymin, &p1.x, &p1.y);
	cairo_line_to(cr, p1.x-aContext->screenX, p1.y-aContext->screenY);
	cairo_close_path(cr);

	cairo_set_source_rgba(cr, color->red/255.0, color->green/255.0, color->blue/255.0, color->opacity/255.0);
	cairo_fill_preserve(cr);
	cairo_set_line_width(cr, 0.5);
	cairo_stroke(cr);
}


void draw_single_route(struct Context *aContext, cairo_t *cr, struct Busroute *aRoute)
{
	struct Item *bItem;
	struct RGBO aRgbo;
/*
	bItem = aRoute->upwayCells.head;
	while(bItem!=NULL) {
		draw_single_cell(aContext, cr, (struct Cell*)bItem->datap, &aRoute->color.rgbo); 
		bItem = bItem->next;
	}
	bItem = aRoute->downwayCells.head;
	while(bItem!=NULL) {
		draw_single_cell(aContext, cr, (struct Cell*)bItem->datap, &aRoute->color.rgbo); 
		bItem = bItem->next;
	}
	bItem = aRoute->upwayStops.head;
	while(bItem!=NULL) {
		aRgbo.red = MAX(aRoute->color.rgbo.red - 20, 0);
		aRgbo.green = MAX(aRoute->color.rgbo.green - 20, 0);
		aRgbo.blue = MIN(aRoute->color.rgbo.blue + 20, 255);
		aRgbo.opacity = aRoute->color.rgbo.opacity;
		draw_single_cell(aContext, cr, (struct Cell*)bItem->datap, &aRgbo); 
		bItem = bItem->next;
	}
	bItem = aRoute->downwayStops.head;
	while(bItem!=NULL) {
		aRgbo.red = MAX(aRoute->color.rgbo.red - 20, 0);
		aRgbo.green = MAX(aRoute->color.rgbo.green - 20, 0);
		aRgbo.blue = MAX(aRoute->color.rgbo.blue - 20, 0);
		aRgbo.opacity = MAX(aRoute->color.rgbo.opacity - 20, 0);
		draw_single_cell(aContext, cr, (struct Cell*)bItem->datap, &aRgbo); 
		bItem = bItem->next;
	}
*/
}


void draw_selected_routes(struct Context *aContext, cairo_t *cr)
{
	struct Item *aSelected;

	aSelected = aContext->selectedRoutes.head;
	while(aSelected != NULL) {
		draw_single_route(aContext, cr, (struct Busroute*)aSelected->datap);
		aSelected = aSelected->next;
	}
}



void draw_displayed_traces(struct Context *aContext, cairo_t *cr)
{
	struct Item *aSelected;

	aSelected = aContext->selectedTraces.head;
	while(aSelected != NULL) {
		draw_displayed_reports(aContext, cr, (struct Trace*)aSelected->datap);
		aSelected = aSelected->next;
	}
}


void show_district_on_screen(struct Context *aContext, struct District *aDistrict, cairo_t *cr)
{
	struct Point point, point1;
	struct Item *pllp, *pp;
  	struct Color fillColor;

	fillColor.red = 235.0/255;
	fillColor.green = 210.0/255;
	fillColor.blue = 175.0/255;


	if(aDistrict != NULL) {
		pllp = aDistrict->rings.head;
		while(pllp!=NULL) {
			pp = ((struct Duallist*)pllp->datap)->head;
			point1.x = ((struct Point*)pp->datap)->x, point1.y = ((struct Point*)pp->datap)->y;
			g_print("%.4lf %.4lf ", point1.x, point1.y);
			gps_to_canvas(&aContext->canvasWindow,((struct Point*)pp->datap)->x,((struct Point*)pp->datap)->y, &point.x, &point.y);
			cairo_move_to(cr, point.x-aContext->screenX, point.y-aContext->screenY);
			pp = pp->next;
			while(pp!=NULL) {
				g_print("%.4lf %.4lf ", ((struct Point*)pp->datap)->x,((struct Point*)pp->datap)->y);
				gps_to_canvas(&aContext->canvasWindow,((struct Point*)pp->datap)->x,((struct Point*)pp->datap)->y,&point.x,&point.y);
				cairo_line_to(cr, point.x-aContext->screenX, point.y-aContext->screenY);
				pp = pp->next;
			}
			cairo_close_path(cr);
			cairo_set_source_rgba(cr, fillColor.red, fillColor.green, fillColor.blue, 0.3);
			cairo_fill(cr);
			pllp = pllp->next;
		}
		g_print("%.4lf %.4lf\n", point1.x, point1.y);
	}
}



void draw_districts(struct Context *aContext)
{

	double dashes[]={5.0, 2.0, 3.0, 2.0};
	int ndash = sizeof(dashes)/sizeof(dashes[0]);
	double offset = -10.0;
	struct Point point;
	double transparent;
  	struct Color fillColor, lineColor;
	struct Item *distp, *pllp, *pp;

/*
	fillColor.red = 230.0/255;
	fillColor.green = 225.0/255;
	fillColor.blue = 215.0/255;
*/
	fillColor.red = 255.0/255;
	fillColor.green = 250.0/255;
	fillColor.blue = 240.0/255;


	/* boundary stroke */
	distp = aContext->region->districts.head;
	while(distp!=NULL) {
		pllp = ((struct District*)distp->datap)->rings.head;
		while(pllp!=NULL) {
			pp = ((struct Duallist*)pllp->datap)->head;
			gps_to_canvas(&aContext->canvasWindow,((struct Point*)pp->datap)->x,((struct Point*)pp->datap)->y, &point.x, &point.y);
			cairo_move_to(aContext->cr_on_canvas, point.x, point.y);
			pp = pp->next;
			while(pp!=NULL) {
				gps_to_canvas(&aContext->canvasWindow,((struct Point*)pp->datap)->x,((struct Point*)pp->datap)->y,&point.x,&point.y);
				cairo_line_to(aContext->cr_on_canvas, point.x, point.y);
				pp = pp->next;
			}
			cairo_close_path(aContext->cr_on_canvas);
			pllp = pllp->next;
		}
		lineColor.red = 36.0/255;
		lineColor.green = 72.0/255;
		lineColor.blue = 108.0/255;

		cairo_set_line_width(aContext->cr_on_canvas, 4);
		cairo_set_source_rgb(aContext->cr_on_canvas, lineColor.red, lineColor.green, lineColor.blue);
		cairo_stroke(aContext->cr_on_canvas);
		distp = distp->next;
	}

	/* fill color */
	transparent = 1;
	distp = aContext->region->districts.head;
	while(distp!=NULL) {
		pllp = ((struct District*)distp->datap)->rings.head;
		while(pllp!=NULL) {
			pp = ((struct Duallist*)pllp->datap)->head;
			gps_to_canvas(&aContext->canvasWindow,((struct Point*)pp->datap)->x,((struct Point*)pp->datap)->y, &point.x, &point.y);
			cairo_move_to(aContext->cr_on_canvas, point.x, point.y);
			pp = pp->next;
			while(pp!=NULL) {
				gps_to_canvas(&aContext->canvasWindow,((struct Point*)pp->datap)->x,((struct Point*)pp->datap)->y,&point.x,&point.y);
				cairo_line_to(aContext->cr_on_canvas, point.x, point.y);
				pp = pp->next;
			}
			cairo_close_path(aContext->cr_on_canvas);
			pllp = pllp->next;
		}
		cairo_set_source_rgba(aContext->cr_on_canvas, fillColor.red, fillColor.green, fillColor.blue, transparent);
		cairo_fill(aContext->cr_on_canvas);
		distp = distp->next;
	}

	/* inner stroke */
	distp = aContext->region->districts.head;
	cairo_set_dash(aContext->cr_on_canvas, dashes, ndash, offset);
	while(distp!=NULL) {
		pllp = ((struct District*)distp->datap)->rings.head;
		while(pllp!=NULL) {
			pp = ((struct Duallist*)pllp->datap)->head;
			gps_to_canvas(&aContext->canvasWindow,((struct Point*)pp->datap)->x,((struct Point*)pp->datap)->y, &point.x, &point.y);
			cairo_move_to(aContext->cr_on_canvas, point.x, point.y);
			pp = pp->next;
			while(pp!=NULL) {
				gps_to_canvas(&aContext->canvasWindow,((struct Point*)pp->datap)->x,((struct Point*)pp->datap)->y,&point.x,&point.y);
				cairo_line_to(aContext->cr_on_canvas, point.x, point.y);
				pp = pp->next;
			}
			cairo_close_path(aContext->cr_on_canvas);
			pllp = pllp->next;
		}

		lineColor.red = 160.0/255;
		lineColor.green = 160.0/255;
		lineColor.blue = 164.0/255;

		cairo_set_line_width(aContext->cr_on_canvas, 0.3);
		cairo_set_source_rgb(aContext->cr_on_canvas, lineColor.red, lineColor.green, lineColor.blue);
		cairo_stroke(aContext->cr_on_canvas);
		distp = distp->next;
	}
	cairo_set_dash(aContext->cr_on_canvas, dashes, 0, offset);	
}


void draw_rivers(struct Context *aContext)
{
	struct Point point;
	double transparent;
	struct Item *riverp, *pllp, *pp;
  	struct Color fillColor, lineColor;

	fillColor.red = 175.0/255;
	fillColor.green = 210.0/255;
	fillColor.blue = 235.0/255;

	lineColor.red = 140.0/255;
	lineColor.green = 145.0/255;
	lineColor.blue = 135.0/255;

	transparent = 1;

	riverp = aContext->region->rivers.head;
	while(riverp!=NULL) {
		pllp = ((struct River*)riverp->datap)->rings.head;
		while(pllp!=NULL) {
			pp = ((struct Duallist*)pllp->datap)->head;
			gps_to_canvas(&aContext->canvasWindow,((struct Point*)pp->datap)->x,((struct Point*)pp->datap)->y, &point.x, &point.y);
			cairo_move_to(aContext->cr_on_canvas, point.x, point.y);
			pp = pp->next;
			while(pp!=NULL) {
				gps_to_canvas(&aContext->canvasWindow,((struct Point*)pp->datap)->x,((struct Point*)pp->datap)->y,&point.x,&point.y);
				cairo_line_to(aContext->cr_on_canvas, point.x, point.y);
				pp = pp->next;
			}
			cairo_close_path(aContext->cr_on_canvas);
			pllp = pllp->next;
		}
		cairo_set_line_width(aContext->cr_on_canvas, 1);
		cairo_set_source_rgba(aContext->cr_on_canvas, lineColor.red, lineColor.green, lineColor.blue, transparent);
		cairo_stroke_preserve(aContext->cr_on_canvas);
		cairo_set_source_rgba(aContext->cr_on_canvas, fillColor.red, fillColor.green, fillColor.blue, transparent);
		cairo_fill(aContext->cr_on_canvas);
		riverp = riverp->next;
	}

}

void draw_yardstick_on_screen(struct Context *aContext)
{
	struct Point aSPoint, bSPoint, aCPoint, bCPoint;
	cairo_text_extents_t extents;
	char buf[128], buf1[128];
	double dist;
	
	aSPoint.x = MARGIN+40;
	aSPoint.y = MARGIN+40;
	bSPoint.x = MARGIN+90;
	bSPoint.y = MARGIN+40;

	cairo_move_to(aContext->cr_on_screen, aSPoint.x, aSPoint.y);
	cairo_line_to(aContext->cr_on_screen, aSPoint.x, aSPoint.y+3);
	cairo_line_to(aContext->cr_on_screen, aSPoint.x+50, aSPoint.y+3);
	cairo_line_to(aContext->cr_on_screen, aSPoint.x+50, aSPoint.y);
	cairo_set_line_width(aContext->cr_on_screen, 1);
	cairo_set_source_rgb(aContext->cr_on_screen, 64.0/255, 0, 64.0/255);
	cairo_stroke(aContext->cr_on_screen);
	
	canvas_to_gps(&aContext->canvasWindow, aContext->screenX+aSPoint.x, aContext->screenY+aSPoint.y, &aCPoint.x, &aCPoint.y);
	canvas_to_gps(&aContext->canvasWindow, aContext->screenX+bSPoint.x, aContext->screenY+bSPoint.y, &bCPoint.x, &bCPoint.y);
	dist = distance_in_meter(aCPoint.x, 0, bCPoint.x, 0);

	sprintf(buf, "0");
	if (dist/1000 > 1) {
		sprintf(buf1, "%.2lfkm", dist/1000);
	} else
		sprintf(buf1, "%.0lfm", dist);

	cairo_select_font_face(aContext->cr_on_screen, "Sans", CAIRO_FONT_SLANT_NORMAL, CAIRO_FONT_WEIGHT_NORMAL);
	cairo_set_font_size(aContext->cr_on_screen, FONT_SIZE);
	cairo_text_extents(aContext->cr_on_screen, buf, &extents);
	cairo_set_source_rgb(aContext->cr_on_screen, 64.0/255, 0, 64.0/255);
	cairo_move_to(aContext->cr_on_screen, aSPoint.x-5, aSPoint.y+15);
	cairo_show_text(aContext->cr_on_screen, buf);
	cairo_text_extents(aContext->cr_on_screen, buf1, &extents);
	cairo_move_to(aContext->cr_on_screen, aSPoint.x+40, aSPoint.y+15);
	cairo_show_text(aContext->cr_on_screen, buf1);
}

void rubber_cells(struct Context *aContext)
{
	struct Point p1, p2;
	double minx, miny, maxx, maxy;
	struct Item *aItem;

	if(aContext->screenSurroundings.head == NULL) return;

	aItem = aContext->screenSurroundings.head;
	gps_to_canvas(&aContext->canvasWindow, ((struct Cell*)aItem->datap)->box.xmin, ((struct Cell*)aItem->datap)->box.ymin, &minx, &maxy);
	gps_to_canvas(&aContext->canvasWindow, ((struct Cell*)aItem->datap)->box.xmax, ((struct Cell*)aItem->datap)->box.ymax, &maxx, &miny);
	while(aItem!=NULL) {
		gps_to_canvas(&aContext->canvasWindow, ((struct Cell*)aItem->datap)->box.xmin, ((struct Cell*)aItem->datap)->box.ymin, &p1.x, &p1.y);
		gps_to_canvas(&aContext->canvasWindow, ((struct Cell*)aItem->datap)->box.xmax, ((struct Cell*)aItem->datap)->box.ymax, &p2.x, &p2.y);
		if (p1.x < minx) minx = p1.x;
		if (p1.y > maxy) maxy = p1.y;
		if (p2.x > maxx) maxx = p2.x;
		if (p2.y < miny) miny = p2.y;
		aItem=aItem->next;
	}
	gdk_draw_drawable(aContext->drawingArea->window, aContext->gc, aContext->canvas, minx-aContext->screenX , miny-aContext->screenY, minx-aContext->screenX, miny-aContext->screenY, maxx-minx, maxy-miny);
}


void draw_cells(struct Context *aContext, cairo_t *cr)
{
	char buf[128];
	double transparent;
	struct Item *aItem;
	struct Point p1, p2;
	double cellsize, fontSize, fsize, fontX, fontY;
	cairo_text_extents_t extents;
  	struct Color fillColor, lineColor, fontColor;

	fillColor.red = 175.0/255;
	fillColor.green = 210.0/255;
	fillColor.blue = 235.0/255;

	lineColor.red = 140.0/255;
	lineColor.green = 145.0/255;
	lineColor.blue = 135.0/255;

	fontColor.red = 0/255;
	fontColor.green = 0/255;
	fontColor.blue = 0/255;

	transparent = 0.3;

	aItem = aContext->screenSurroundings.head;
	gps_to_canvas(&aContext->canvasWindow, ((struct Cell*)aItem->datap)->box.xmin, ((struct Cell*)aItem->datap)->box.ymin, &p1.x, &p1.y);
	gps_to_canvas(&aContext->canvasWindow, ((struct Cell*)aItem->datap)->box.xmax, ((struct Cell*)aItem->datap)->box.ymax, &p2.x, &p2.y);
	cellsize = p2.x - p1.x;
	while(aItem!=NULL) {
		gps_to_canvas(&aContext->canvasWindow, ((struct Cell*)aItem->datap)->box.xmin, ((struct Cell*)aItem->datap)->box.ymin, &p1.x, &p1.y);
		fontX = p1.x-aContext->screenX, fontY = p1.y-aContext->screenY;
		cairo_move_to(cr, p1.x-aContext->screenX, p1.y-aContext->screenY);
		gps_to_canvas(&aContext->canvasWindow, ((struct Cell*)aItem->datap)->box.xmin, ((struct Cell*)aItem->datap)->box.ymax, &p1.x, &p1.y);
		cairo_line_to(cr, p1.x-aContext->screenX, p1.y-aContext->screenY);
		gps_to_canvas(&aContext->canvasWindow, ((struct Cell*)aItem->datap)->box.xmax, ((struct Cell*)aItem->datap)->box.ymax, &p1.x, &p1.y);
		cairo_line_to(cr, p1.x-aContext->screenX, p1.y-aContext->screenY);
		gps_to_canvas(&aContext->canvasWindow, ((struct Cell*)aItem->datap)->box.xmax, ((struct Cell*)aItem->datap)->box.ymin, &p1.x, &p1.y);
		cairo_line_to(cr, p1.x-aContext->screenX, p1.y-aContext->screenY);
		cairo_close_path(cr);
		cairo_set_line_width(cr, 1);
		cairo_set_source_rgba(cr, lineColor.red, lineColor.green, lineColor.blue, transparent);
		cairo_stroke_preserve(cr);
		cairo_set_source_rgba(cr, fillColor.red, fillColor.green, fillColor.blue, transparent);
		cairo_fill(cr);

		sprintf(buf, "(%d, %d)", ((struct Cell*)aItem->datap)->xNumber, ((struct Cell*)aItem->datap)->yNumber);
		if (aItem == aContext->screenSurroundings.head) {
			fsize = 2*cellsize/(strlen(buf)+2);
			if (fsize > 25) fsize = 15;
			fontSize = fsize;
		} else
			fontSize = 0.75*fsize;

		if(fsize > 5) {
			fontX = fontX + fontSize*0.5;
			fontY = fontY + fontSize*0.5;
			cairo_select_font_face(cr, "Sans", CAIRO_FONT_SLANT_NORMAL, CAIRO_FONT_WEIGHT_NORMAL);
			cairo_set_font_size(cr, (int)fontSize);
			cairo_text_extents(cr, buf, &extents);
			cairo_set_source_rgba(cr, fontColor.red, fontColor.green, fontColor.blue, transparent);
			cairo_move_to(cr, fontX, fontY-extents.height);
			cairo_show_text(cr, buf);
		}
		aItem=aItem->next;
	}
}

/* draw the dynamic display at Cell.at */
void draw_cell_display(struct Context *aContext, cairo_t *cr, struct Cell *aCell)
{

	struct Point p1;
	struct Color aColor;

	gps_to_canvas(&aContext->canvasWindow, aCell->box.xmin, aCell->box.ymin, &p1.x, &p1.y);
	cairo_move_to(cr, p1.x-aContext->screenX, p1.y-aContext->screenY);
	gps_to_canvas(&aContext->canvasWindow, aCell->box.xmin, aCell->box.ymax, &p1.x, &p1.y);
	cairo_line_to(cr, p1.x-aContext->screenX, p1.y-aContext->screenY);
	gps_to_canvas(&aContext->canvasWindow, aCell->box.xmax, aCell->box.ymax, &p1.x, &p1.y);
	cairo_line_to(cr, p1.x-aContext->screenX, p1.y-aContext->screenY);
	gps_to_canvas(&aContext->canvasWindow, aCell->box.xmax, aCell->box.ymin, &p1.x, &p1.y);
	cairo_line_to(cr, p1.x-aContext->screenX, p1.y-aContext->screenY);
	cairo_close_path(cr);


	get_color(aContext->colormap, &aColor, ((struct Display*)aCell->at->datap)->value, aContext->region->lower, aContext->region->upper);
	if(aColor.red == -1) {
		aColor.red = 230.0/255;
		aColor.green = 225.0/255;
		aColor.blue = 215.0/255;
	}
	
	cairo_set_source_rgb(cr, aColor.red, aColor.green, aColor.blue);
	cairo_fill_preserve(cr);
	cairo_set_line_width(cr, 0.5);
	cairo_stroke(cr);
}

void draw_links(struct Context *aContext)
{
	struct Item *anEntry;
  	struct RGBO fillColor;
	double dashes[]={4.0, 4.0};
	int ndash = sizeof(dashes)/sizeof(dashes[0]);
	double offset = -10.0;

	fillColor.red = 255;
	fillColor.green = 0;
	fillColor.blue = 0;
	fillColor.opacity = 255;

	cairo_set_line_join(aContext->cr_on_screen, CAIRO_LINE_JOIN_ROUND);
	cairo_set_line_cap(aContext->cr_on_screen, CAIRO_LINE_CAP_BUTT);
	cairo_set_dash(aContext->cr_on_screen, dashes, ndash, offset);

	anEntry = aContext->links.head;
	while(anEntry != NULL) {
	      draw_single_road(aContext, aContext->cr_on_screen, anEntry->datap, &fillColor);
	      anEntry = anEntry->next;
	}

	cairo_set_dash(aContext->cr_on_screen, dashes, 0, offset);	
}


void draw_roads(struct Context *aContext)
{
	struct Item *anEntry;
  	struct RGBO fillColor;

	fillColor.red = 255;
	fillColor.green = 255;
	fillColor.blue = 255;
	fillColor.opacity = 255;

	cairo_set_line_join(aContext->cr_on_canvas, CAIRO_LINE_JOIN_ROUND);
	cairo_set_line_cap(aContext->cr_on_canvas, CAIRO_LINE_CAP_BUTT);

	anEntry = aContext->region->roads.head;
	while(anEntry != NULL) {
	      draw_single_road(aContext, aContext->cr_on_canvas, anEntry->datap, &fillColor);
	      anEntry = anEntry->next;
	}
}



void draw_single_road(struct Context *aContext, cairo_t *cr, struct Road *aRoad, struct RGBO *fillColor)
{
	struct Item *p;
	struct Point point;
	double width, wRoad;
	struct Color lineColor;

	width = aRoad->width/aContext->meterperpixel;
	if(width < 1) 
		wRoad =1;
	else 
		wRoad = width;

	/* draw a road */
	lineColor.red = 179.0/255;
	lineColor.green = 166.0/255;
	lineColor.blue = 147.0/255;

	p = aRoad->points.head;
	gps_to_canvas(&aContext->canvasWindow, ((struct Point*)p->datap)->x, ((struct Point*)p->datap)->y, &point.x, &point.y);
	cairo_move_to(cr, point.x, point.y);
	p = p->next;
	while(p!=NULL) {
		gps_to_canvas(&aContext->canvasWindow, ((struct Point*)p->datap)->x, ((struct Point*)p->datap)->y, &point.x, &point.y);
		cairo_line_to(cr, point.x, point.y);
		p = p->next;
	}
	cairo_set_line_width(cr, wRoad+1);
	cairo_set_source_rgb(cr, lineColor.red, lineColor.green, lineColor.blue);
	cairo_stroke_preserve(cr);
	cairo_set_line_width(cr, wRoad);
	cairo_set_source_rgba(cr, fillColor->red/255.0, fillColor->green/255.0, fillColor->blue/255.0, fillColor->opacity/255.0);
	cairo_stroke(cr);
}

/*
void draw_single_road(cairo_t *cr, struct Road *aRoad, struct Color *aColor)
{
    struct Item *aScrap;
    struct Color bColor;
    struct Item *p;
    struct Point point;
    double width;


    width = aRoad->width/aContext->meterperpixel;
    if(width < 1) width =1;

    // draw edge of the road 
    //  put code here

    aScrap = aRoad->scraps.head;
    while(aScrap != NULL) {
	    // draw edge of a road
	    p = ((struct Scrap*)aScrap->datap)->points.head;
	    gps_to_canvas(&aContext->canvasWindow, ((struct Point*)p->datap)->x, ((struct Point*)p->datap)->y, &(point.x), &(point.y));
	    cairo_move_to(cr, point.x-screenX, point.y-screenY);
	    p = p->next;
	    while(p!=NULL) {
		gps_to_canvas(&aContext->canvasWindow, ((struct Point*)p->datap)->x, ((struct Point*)p->datap)->y, &(point.x), &(point.y));
		cairo_line_to(cr, point.x-screenX, point.y-screenY);
		p = p->next;
	    }
	    // draw color of the road 
	    cairo_set_line_width(cr, width);
	    get_color(&(region->cmap), &bColor, aScrap->value, region->lower, region->upper);
	    if(bColor.red == -1) {
		bColor.red = aRoad->color.red;
		bColor.green = aRoad->color.green;
		bColor.blue = aRoad->color.blue;
	    } 
	    cairo_set_source_rgb(cr, bColor.red, bColor.green, bColor.blue);
	    cairo_stroke(cr);
	    aScrap = aScrap->next;
    }
}
*/

void draw_rsus(struct Context *aContext)
{
	struct Cross *aCross;
	struct Item *anEntry;
	struct Point aPoint, bPoint, cPoint;

	anEntry = aContext->rsus.head;
	while(anEntry != NULL) {
		aCross = (struct Cross*)anEntry->datap;
		gps_to_canvas(&aContext->canvasWindow, aCross->gPoint.x, aCross->gPoint.y, &aPoint.x, &aPoint.y);
		gps_to_canvas(&aContext->canvasWindow, aCross->box.xmin, aCross->box.ymin, &bPoint.x, &bPoint.y);
		gps_to_canvas(&aContext->canvasWindow, aCross->box.xmax, aCross->box.ymin, &cPoint.x, &cPoint.y);
		cairo_arc(aContext->cr_on_screen,  (int)aPoint.x-aContext->screenX, (int)aPoint.y-aContext->screenY, (cPoint.x-bPoint.x)*5, 0, 2*M_PI) ;
		cairo_set_source_rgb(aContext->cr_on_screen, 0, 0, 0);
		cairo_stroke_preserve(aContext->cr_on_screen);
		cairo_set_source_rgb(aContext->cr_on_screen, 0.2, 0.2, 0.8);
		cairo_fill(aContext->cr_on_screen);
		anEntry = anEntry->next;
	}

}

void draw_crosses(struct Context *aContext)
{
	struct Cross *aCross;
	struct Item *anEntry;
  	struct RGBO color;

	color.red = 255;
	color.green = 255;
	color.blue = 255;
	color.opacity = 255;

	anEntry = aContext->region->crosses.head;
	while(anEntry != NULL) {
		aCross = (struct Cross*)anEntry->datap;
		draw_single_cross(aContext, aContext->cr_on_canvas, aCross, &color); 
		anEntry = anEntry->next;
	}
}


void draw_single_cross(struct Context *aContext, cairo_t *cr, struct Cross *aCross, struct RGBO *color)
{
	struct Point point;

	gps_to_canvas(&aContext->canvasWindow, aCross->box.xmin, aCross->box.ymin, &point.x, &point.y);
	cairo_move_to(cr, (int)point.x, (int)point.y);
	gps_to_canvas(&aContext->canvasWindow, aCross->box.xmin, aCross->box.ymax, &point.x, &point.y);
	cairo_line_to(cr, (int)point.x, (int)point.y);
	gps_to_canvas(&aContext->canvasWindow, aCross->box.xmax, aCross->box.ymax, &point.x, &point.y);
	cairo_line_to(cr, (int)point.x, (int)point.y);
	gps_to_canvas(&aContext->canvasWindow, aCross->box.xmax, aCross->box.ymin, &point.x, &point.y);
	cairo_line_to(cr, (int)point.x, (int)point.y);
	cairo_close_path(cr);
	cairo_set_source_rgba(cr, color->red/255.0, color->green/255.0, color->blue/255.0, color->opacity/255.0);
	cairo_set_line_width(cr, 1);
	cairo_stroke(cr);
}


void draw_displayed_reports(struct Context *aContext, cairo_t *cr, struct Trace *aTrace) 
{

  struct Point point;
  struct Report *aReport;

  if (aTrace == NULL) return;

  struct Item *aItem = aTrace->reports.head;
  while(aItem != aTrace->at) {
	aReport = (struct Report*)aItem->datap;
	gps_to_canvas(&aContext->canvasWindow, aReport->gPoint.x, aReport->gPoint.y, &(point.x), &(point.y));
	if(aReport->shown==1 && point.x > aContext->screenX+MARGIN && point.x < aContext->screenX+aContext->screenWidth-MARGIN && point.y > aContext->screenY+MARGIN && point.y < aContext->screenY+aContext->screenHeight-MARGIN ) {
		draw_single_report(aContext, cr, aReport, &aReport->fromTrace->color.rgbo);
	}
	aItem = aItem->next;
  }
}


void draw_single_report(struct Context *aContext, cairo_t *cr, struct Report *aReport, struct RGBO *color)
{
	struct Point point;

	if(aReport==NULL || !is_point_in_box(&aReport->gPoint, &aContext->region->chosen_polygon->box )) return;
	
	gps_to_canvas(&aContext->canvasWindow, aReport->gPoint.x, aReport->gPoint.y, &(point.x), &(point.y));
	cairo_move_to(cr, point.x+cos(M_PI*aReport->angle/180)*MARK_LENGTH-aContext->screenX, point.y-sin(M_PI*aReport->angle/180)*MARK_LENGTH-aContext->screenY);
	cairo_line_to(cr, point.x+cos(M_PI*(90+aReport->angle)/180)*MARK_LENGTH/4-aContext->screenX, point.y-sin(M_PI*(90+aReport->angle)/180)*MARK_LENGTH/4-aContext->screenY);
	cairo_line_to(cr, point.x+cos(M_PI*(270+aReport->angle)/180)*MARK_LENGTH/4-aContext->screenX, point.y-sin(M_PI*(270+aReport->angle)/180)*MARK_LENGTH/4-aContext->screenY);

	cairo_set_source_rgb(cr, color->red/255.0, color->green/255.0, color->blue/255.0);
	cairo_fill(cr);
}



void draw_displayed_pairs(struct Context *aContext, cairo_t *cr)
{
	struct Item *aSelected;

	aSelected = aContext->selectedPairs.head;
	while(aSelected != NULL) {
		draw_displayed_contacts(aContext, cr, (struct Pair*)aSelected->datap);
		aSelected = aSelected->next;
	}
}


void draw_displayed_contacts(struct Context *aContext, cairo_t *cr, struct Pair *aPair) 
{

  struct Point point;
  struct Contact *aContact;

  if (aPair == NULL) return;

  struct Item *aItem = aPair->contents.head;
  while(aItem != aPair->at) {
	aContact = (struct Contact*)aItem->datap;
	gps_to_canvas(&aContext->canvasWindow, aContact->gPoint.x, aContact->gPoint.y, &(point.x), &(point.y));
	if(aContact->shown==1 && point.x > aContext->screenX+MARGIN && point.x < aContext->screenX+aContext->screenWidth-MARGIN && point.y > aContext->screenY+MARGIN && point.y < aContext->screenY+aContext->screenHeight-MARGIN ) {
		draw_single_contact(aContext, cr, aContact, &aContact->fromPair->color.rgbo);
	}
	aItem = aItem->next;
  }
}


void draw_single_contact(struct Context *aContext, cairo_t *cr, struct Contact *aContact, struct RGBO *color)
{
	struct Point point;

	if(aContact==NULL) return;
	
	gps_to_canvas(&aContext->canvasWindow, aContact->gPoint.x, aContact->gPoint.y, &(point.x), &(point.y));
	cairo_arc(cr, point.x-aContext->screenX, point.y-aContext->screenY, CONTACT_RADIUS, 0, 2*M_PI);
	cairo_set_source_rgb(cr, color->red/255.0, color->green/255.0, color->blue/255.0);
	cairo_fill(cr);
}

void rubber_single_report(struct Context *aContext, cairo_t *cr, struct Report *aReport)
{

}


void gps_to_canvas(struct WindowSize* awnd, double x, double y, double *rx, double *ry)
{
  double dxgps, dygps;
  double dxscrn, dyscrn;

  dxgps = awnd->cBox.xmax - awnd->cBox.xmin ;
  dygps = awnd->cBox.ymax - awnd->cBox.ymin ;

  dxscrn = awnd->sBox.xmax - awnd->sBox.xmin;
  dyscrn = awnd->sBox.ymax - awnd->sBox.ymin;

  if (greaterd(dxgps * dyscrn, dygps * dxscrn, DELTA) || equald(dxgps * dyscrn, dygps * dxscrn, DELTA)) 
	awnd->scale = dxscrn/dxgps;
  else
	awnd->scale = dyscrn/dygps;

  *ry = (awnd->cBox.ymax - y) * awnd->scale;
  *rx = (x - awnd->cBox.xmin) * awnd->scale;
}

double canvas_to_gps(struct WindowSize* awnd, double x, double y, double *rx, double *ry)
{
  double dxgps, dygps;
  double dxscrn, dyscrn;

  dxgps = awnd->cBox.xmax - awnd->cBox.xmin ;
  dygps = awnd->cBox.ymax - awnd->cBox.ymin ;

  dxscrn = awnd->sBox.xmax - awnd->sBox.xmin;
  dyscrn = awnd->sBox.ymax - awnd->sBox.ymin;

  if (greaterd(dxgps * dyscrn, dygps * dxscrn, DELTA) || equald(dxgps * dyscrn, dygps * dxscrn, DELTA)) 
	awnd->scale = dxgps/dxscrn;
  else
	awnd->scale = dygps/dyscrn;

  *rx = awnd->cBox.xmin + x*awnd->scale;
  *ry = awnd->cBox.ymax - y*awnd->scale;
  return awnd->scale;
}

void assign_window_size(struct WindowSize *target, struct WindowSize *source)
{
	target->cBox.xmin = source->cBox.xmin;
	target->cBox.xmax = source->cBox.xmax;
	target->cBox.ymin = source->cBox.ymin;
	target->cBox.ymax = source->cBox.ymax;
	target->sBox.xmin = source->sBox.xmin;
	target->sBox.xmax = source->sBox.xmax;
	target->sBox.ymin = source->sBox.ymin;
	target->sBox.ymax = source->sBox.ymax;
}

void draw_text_on_screen(struct Context *aContext, char* text, int x, int y, int size)
{
	cairo_text_extents_t extents;

	cairo_select_font_face(aContext->cr_on_screen, "Sans", CAIRO_FONT_SLANT_NORMAL, CAIRO_FONT_WEIGHT_NORMAL);
	cairo_set_font_size(aContext->cr_on_screen, size);
	cairo_text_extents(aContext->cr_on_screen, text, &extents);

	gdk_draw_drawable(aContext->drawingArea->window, aContext->gc, aContext->canvas, 
			  x-5, y-5, 
			  x-5, y-5, 
			  extents.width+10, extents.height+10);
	cairo_set_source_rgb(aContext->cr_on_screen, 64.0/255, 0, 64.0/255);
	cairo_move_to(aContext->cr_on_screen, x, y+extents.height);
	cairo_show_text(aContext->cr_on_screen, text);
}
			


struct Colormap* load_colormap(char *filename)
{
	FILE *fp;
	char buffer[64];
	int i;
	struct Colormap *rt;

	if((fp=fopen(filename, "r"))==NULL) {
		printf("Cannot open colormap file!\n");
		return NULL;
	}

	rt = (struct Colormap*)malloc(sizeof(struct Colormap));

	fgets(buffer, 64, fp);
	sscanf(buffer, "%d", &(rt->nColors));
	rt->colors = (struct Color*)malloc(sizeof(struct Color)*rt->nColors);
	for (i = 0; i< rt->nColors; i++) {
		fgets(buffer, 64, fp);
		sscanf(buffer, "%lf %lf %lf", &(rt->colors[i].red), &(rt->colors[i].green), &(rt->colors[i].blue));
	}
	fclose(fp);
	return rt;
}


void free_colormap(struct Colormap *cmap)
{
	if(cmap!=NULL) {
		if(cmap->colors!=NULL)
	  		free(cmap->colors);
		free(cmap);
	}
}


void get_color(struct Colormap *cmap, struct Color *rtColor, double value, double lower, double upper)
{
	double whichColor;
	int index;
	
	if(cmap == NULL || (cmap!=NULL&&cmap->colors==NULL) || lower==upper) {
		rtColor->red =-1, rtColor->green = -1; rtColor->blue = -1;
		return;
	}
	whichColor = (value-lower)/(upper-lower) * cmap->nColors;
	if(whichColor<0) {
		rtColor->red =-1, rtColor->green = -1; rtColor->blue = -1;
		return;
	}
	if(whichColor >= cmap->nColors)
		whichColor = cmap->nColors-1;
	index = ceil(whichColor);	
	rtColor->red = cmap->colors[index].red;
	rtColor->green = cmap->colors[index].green;
	rtColor->blue = cmap->colors[index].blue;
}

